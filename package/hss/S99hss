#!/bin/sh

HSS_DAEMON="hss"
HSS_DAEMON_ARGS=""
HSS_PIDFILE="/var/run/hss.pid"

UI_DAEMON="/usr/local/cpx/scripts/start_ui.sh"
UI_DAEMON_ARGS=""
UI_PIDFILE="/var/run/ui.pid"

RPROC_CLASS_DIR="/sys/class/remoteproc/remoteproc0/"
FIRMWARE_DIR="/lib/firmware"
USER_LOCAL_DIR="/usr/local/cpx"
USER_LOCAL_BIN_DIR=$USER_LOCAL_DIR/bin
USER_LOCAL_FW_DIR=$USER_LOCAL_DIR$FIRMWARE_DIR
FIRMWARE_NAME=$(basename $USER_LOCAL_FW_DIR/*)
RPROC_STATE=$(tr -d '\0' <$RPROC_CLASS_DIR/state)

CONFIG_FS_DIR="/sys/kernel/config"
GADGET_DIR=$CONFIG_FS_DIR/usb_gadget
GADGET_DEV_DIR=$GADGET_DIR/custom_hid

: ${USB_IDVENDOR:=0x0483}
: ${USB_IDPRODUCT:=0x5750}
: ${USB_BCDDEVICE:=0x0100}
: ${USB_BCDUSB:=0x0200}
: ${USB_SERIALNUMBER:=00000000001A}
: ${USB_PRODUCT:="Maestro CPX"}
: ${USB_MANUFACTURER:="Teknotel Elektronics"}
: ${USB_MAXPOWER:=250}
: ${USB_CONFIG:=conf.1}
: ${USB_PROTOCOL:=0}
: ${USB_SUBCLASS:=0}
: ${USB_REPORT_LEN:=64}
: ${USB_REPORT_DESC:='\x06\xff\x00\x09\x01\xa1\x01\x85\x01\x09\x01\x15\x00\x26\xff\x00\x75\x08\x95\x3f\xb1\x82\x85\x01\x09\x01\x91\x82\x85\x05\x09\x05\x15\x00\x26\xff\x00\x75\x01\x81\x82\x09\x05\x75\x01\xb1\x82\x75\x07\x81\x83\x85\x05\x75\x07\xb1\x83\xc0'}
: ${USB_FUNCTION:=hid.usb}

power_on_gprs() {
	gpioset gpiochip0 14=1
	sleep 1
	gpioset gpiochip3 10=1
}

power_off_gprs() {
	gpioset gpiochip3 10=0
	sleep 1
	gpioset gpiochip0 14=0
}

start_m4() {
	if [ $RPROC_STATE == "running" ]; then
		echo "M4 fw already running ..."
	else
		if [ ! -d $FIRMWARE_DIR ]; then
			echo "Create $FIRMWARE_DIR directory"
			mkdir $FIRMWARE_DIR
		fi

		cp $USER_LOCAL_FW_DIR/$FIRMWARE_NAME $FIRMWARE_DIR/

		echo $FIRMWARE_NAME >$RPROC_CLASS_DIR/firmware
		echo start >$RPROC_CLASS_DIR/state

	fi
}

stop_m4() {
	if [ $RPROC_STATE == "offline" ]; then
		echo "Nothing to do, no M4 fw is running"

	else
		echo stop >$RPROC_CLASS_DIR/state

	fi
}

add_usb_gadget() {
	if [ ! -d $GADGET_DEV_DIR ]; then
		echo "Creating USB gadget custom_hid"
		mount -t configfs none $CONFIG_FS_DIR

		mkdir -p $GADGET_DEV_DIR

		echo $USB_IDVENDOR >$GADGET_DEV_DIR/idVendor
		echo $USB_IDPRODUCT >$GADGET_DEV_DIR/idProduct
		echo $USB_BCDDEVICE >$GADGET_DEV_DIR/bcdDevice
		echo $USB_BCDUSB >$GADGET_DEV_DIR/bcdUSB

		mkdir -p $GADGET_DEV_DIR/strings/0x409
		echo "$USB_SERIALNUMBER" >$GADGET_DEV_DIR/strings/0x409/serialnumber
		echo "$USB_MANUFACTURER" >$GADGET_DEV_DIR/strings/0x409/manufacturer
		echo "$USB_PRODUCT" >$GADGET_DEV_DIR/strings/0x409/product

		mkdir -p $GADGET_DEV_DIR/configs/$USB_CONFIG
		echo $USB_MAXPOWER >$GADGET_DEV_DIR/configs/$USB_CONFIG/MaxPower

		echo "Adding function $USB_FUNCTION to USB gadget custom_hid"
		mkdir -p $GADGET_DEV_DIR/functions/$USB_FUNCTION
		echo $USB_PROTOCOL >$GADGET_DEV_DIR/functions/$USB_FUNCTION/protocol
		echo $USB_SUBCLASS >$GADGET_DEV_DIR/functions/$USB_FUNCTION/subclass
		echo $USB_REPORT_LEN >$GADGET_DEV_DIR/functions/$USB_FUNCTION/report_length
		echo -ne $USB_REPORT_DESC >$GADGET_DEV_DIR/functions/$USB_FUNCTION/report_desc
		ln -s $GADGET_DEV_DIR/functions/$USB_FUNCTION $GADGET_DEV_DIR/configs/$USB_CONFIG

		ls /sys/class/udc/ >$GADGET_DEV_DIR/UDC
	else
		echo "Gadget already configured."
	fi
}

remove_usb_gadget() {
	if [ -d $GADGET_DIR ]; then
		echo '' >$GADGET_DEV_DIR/UDC

		for dir in $GADGET_DEV_DIR/configs/*/strings/*; do
			[ -d $dir ] && rmdir $dir
		done

		for func in $GADGET_DEV_DIR/configs/*.*/*.*; do
			[ -e $func ] && rm $func
		done

		for conf in $GADGET_DEV_DIR/configs/*; do
			[ -d $conf ] && rmdir $conf
		done

		for func in $GADGET_DEV_DIR/functions/*.*; do
			[ -d $func ] && rmdir $func
		done

		for str in $GADGET_DEV_DIR/strings/*; do
			[ -d $str ] && rmdir $str
		done

		rmdir $GADGET_DEV_DIR

		umount $CONFIG_FS_DIR
	else
		echo "No configfs gadget found"
	fi
}

start_UI() {
	printf 'Starting %s: ' "$UI_DAEMON"
	start-stop-daemon -b -m -S -q -p "$UI_PIDFILE" -x "$UI_DAEMON" -- $UI_DAEMON_ARGS
	status=$?
	if [ "$status" -eq 0 ]; then
		echo "OK"
	else
		echo "FAIL"
	fi
    
	return "$status"
}

stop_UI() {
	printf 'Stopping %s: ' "$UI_DAEMON"
	rm -f "$UI_PIDFILE"
    UI_PID=$(ps x | grep "python gui.py" | grep -v "grep" | awk '{print $1}')
    kill -9 $UI_PID
	status=$?
	if [ "$status" -eq 0 ]; then
		echo "OK"
	else
		echo "FAIL"
	fi

	return "$status"
}

start() {
	printf 'Starting %s: ' "$HSS_DAEMON"
	start_m4
	add_usb_gadget
	start-stop-daemon -b -m -S -q -p "$HSS_PIDFILE" -x "$USER_LOCAL_BIN_DIR/$HSS_DAEMON" -- $HSS_DAEMON_ARGS
	status=$?
	if [ "$status" -eq 0 ] || [ "$status" -eq 1 ]; then
		start_UI
		echo "OK"
	else
		echo "FAIL"
	fi

	return "$status"
}

stop() {
	printf 'Stopping %s: ' "$HSS_DAEMON"
	power_on_gprs
	stop_UI
	start-stop-daemon -K -q -p "$HSS_PIDFILE"
	status=$?
	if [ "$status" -eq 0 ]; then
		rm -f "$HSS_PIDFILE"
		echo "OK"
	else
		echo "FAIL"
	fi

	stop_m4
	remove_usb_gadget
	power_off_gprs

	return "$status"
}

restart() {
	stop
	sleep 1
	start
}

case "$1" in
start | stop | restart)
	"$1"
	;;
reload)
	# Restart, since there is no true "reload" feature.
	restart
	;;
*)
	echo "Usage: $0 {start|stop|restart|reload}"
	exit 1
	;;
esac
